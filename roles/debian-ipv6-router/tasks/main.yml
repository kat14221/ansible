---
# Role: debian-ipv6-router (radvd + isc-dhcp-server6)
# Configura DNS y prerequisitos automáticamente, arregla APT y evita cuelgues.

# =========================
# ENV común para APT
# =========================
- name: Set noninteractive env (apt)
  set_fact:
    apt_env:
      DEBIAN_FRONTEND: noninteractive
      NEEDRESTART_MODE: a
      APT_LISTCHANGES_FRONTEND: none
      UCF_FORCE_CONFOLD: "1"

# =========================
# DNS + prerequisitos básicos
# =========================
- name: Ensure base packages (ca-certificates, resolv tools)
  apt:
    name:
      - ca-certificates
      - systemd
      - systemd-sysv
    state: present
    lock_timeout: 600
  environment: "{{ apt_env }}"
  register: base_pkgs
  until: base_pkgs is succeeded
  retries: 3
  delay: 6
  become: yes

- name: Detect if systemd-resolved exists
  stat:
    path: /lib/systemd/system/systemd-resolved.service
  register: has_resolved

# --- Ruta A: usar systemd-resolved (preferida en Debian reciente) ---
- name: Configure systemd-resolved with custom DNS
  block:
    - name: Write /etc/systemd/resolved.conf
      copy:
        dest: /etc/systemd/resolved.conf
        mode: "0644"
        content: |
          [Resolve]
          DNS={{ dhcpv6_dns_servers | join(" ") }}
          FallbackDNS=1.1.1.1 8.8.8.8
          DNSStubListener=yes
    - name: Enable and start systemd-resolved
      systemd:
        name: systemd-resolved
        enabled: yes
        state: started
    - name: Ensure resolv.conf is symlinked to stub
      file:
        src: /run/systemd/resolve/stub-resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: yes
  when: has_resolved.stat.exists
  become: yes

# --- Ruta B: si no hay systemd-resolved, escribir resolv.conf directamente ---
- name: Write /etc/resolv.conf (fallback)
  copy:
    dest: /etc/resolv.conf
    mode: "0644"
    content: |
      {% for s in dhcpv6_dns_servers %}nameserver {{ s }}
      {% endfor %}nameserver 1.1.1.1
      nameserver 8.8.8.8
  when: not has_resolved.stat.exists
  become: yes

# =========================
# Tuning de red para APT
# =========================
- name: Prefer IPv4 & short timeouts for APT
  copy:
    dest: /etc/apt/apt.conf.d/99-network-tuning
    mode: "0644"
    content: |
      Acquire::ForceIPv4 "true";
      Acquire::Retries "1";
      Acquire::http::Timeout "10";
      Acquire::https::Timeout "10";
  become: yes

# =========================
# PRE-APT: evitar locks
# =========================
- name: Stop apt timers during provisioning
  systemd:
    name: "{{ item }}"
    state: stopped
    enabled: no
  loop:
    - apt-daily.timer
    - apt-daily-upgrade.timer
  ignore_errors: yes
  become: yes

- name: Mask services that may lock apt
  systemd:
    name: "{{ item }}"
    masked: yes
  loop:
    - apt-daily.service
    - apt-daily-upgrade.service
    - unattended-upgrades.service
  ignore_errors: yes
  become: yes

- name: Wait for dpkg/apt locks to be free
  shell: |
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do sleep 2; done
    while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 2; done
  changed_when: false
  become: yes

# =========================
# Repos oficiales Debian
# =========================
- name: Detect Debian release codename
  set_fact:
    deb_release: "{{ ansible_facts.distribution_release | default('bookworm') }}"

- name: Render /etc/apt/sources.list with official mirrors
  copy:
    dest: /etc/apt/sources.list
    mode: "0644"
    content: |
      deb http://deb.debian.org/debian {{ deb_release }} main
      deb http://security.debian.org/debian-security {{ deb_release }}-security main
      deb http://deb.debian.org/debian {{ deb_release }}-updates main
  notify: apt sources changed
  become: yes
  # ===== WAN: Configuración en dos fases =====
- name: Ensure /etc/network/interfaces.d exists
  file:
    path: /etc/network/interfaces.d
    state: directory
    mode: "0755"

- name: Include WAN configuration tasks
  include_tasks: configure_wan.yml

# ---- DNS del sistema (systemd-resolved si existe, si no /etc/resolv.conf) ----
- name: Detect systemd-resolved
  stat: { path: /lib/systemd/system/systemd-resolved.service }
  register: has_resolved

- name: Configure systemd-resolved
  block:
    - copy:
        dest: /etc/systemd/resolved.conf
        mode: "0644"
        content: |
          [Resolve]
          DNS={{ dhcpv6_dns_servers | join(" ") }}
          FallbackDNS=1.1.1.1 8.8.8.8
          DNSStubListener=yes
    - systemd: { name: systemd-resolved, enabled: yes, state: started }
    - file:
        src: /run/systemd/resolve/stub-resolv.conf
        dest: /etc/resolv.conf
        state: link
        force: yes
  when: has_resolved.stat.exists

- name: Fallback resolv.conf (si no hay systemd-resolved)
  copy:
    dest: /etc/resolv.conf
    mode: "0644"
    content: |
      {% for s in dhcpv6_dns_servers %}nameserver {{ s }}
      {% endfor %}nameserver 1.1.1.1
      nameserver 8.8.8.8
  when: not has_resolved.stat.exists

# ---- Tuning APT: IPv4 forzado (si tu WAN es IPv4/NAT), timeouts cortos ----
- name: APT network tuning (timeouts y ForceIPv4 opcional)
  copy:
    dest: /etc/apt/apt.conf.d/99-network-tuning
    mode: "0644"
    content: |
      {% if apt_force_ipv4 %}Acquire::ForceIPv4 "true";{% endif %}
      Acquire::Retries "1";
      Acquire::http::Timeout "10";
      Acquire::https::Timeout "10";

# ---- Pruebas rápidas de conectividad (no fallan el play, solo informan) ----
- name: Check default route
  command: ip route
  register: ipr
  changed_when: false
  failed_when: false

- name: Check reachability (ICMP and deb.debian.org DNS)
  shell: |
    (ping -c1 -w3 1.1.1.1 && echo "OK_ICMPv4") || echo "NO_ICMPv4"
    getent ahosts deb.debian.org || true
    timeout 5 curl -I http://deb.debian.org/debian/ || true
  register: reach
  changed_when: false
  failed_when: false

- debug:
    msg:
      - "RUTA: {{ ipr.stdout_lines | default([]) }}"
      - "REACH: {{ reach.stdout_lines | default([]) }}"

# =========================
# apt update robusto
# =========================
- name: apt update (noninteractive, lock_timeout)
  apt:
    update_cache: yes
    cache_valid_time: 3600
    lock_timeout: 600
  environment: "{{ apt_env }}"
  register: apt_update_result
  until: apt_update_result is succeeded
  retries: 3
  delay: 8
  become: yes

# =========================
# Paquetes (radvd + isc-dhcp-server6)
# =========================
- name: Remove dnsmasq if present (avoid conflicts)
  apt:
    name: dnsmasq
    state: absent
    purge: yes
  environment: "{{ apt_env }}"
  ignore_errors: yes
  become: yes

- name: Install required packages (RA/DHCPv6/Firewall/Tools)
  apt:
    name:
      - radvd
      - isc-dhcp-server
      - nftables
      - tcpdump
      - tshark
      - net-tools
      - iproute2
      - curl
      - apache2
      - vsftpd
      - bind9-dnsutils
      - resolvconf
    state: present
    install_recommends: false
    lock_timeout: 600
  environment: "{{ apt_env }}"
  register: pkg_install
  until: pkg_install is succeeded
  retries: 3
  delay: 8
  become: yes

# =========================
# Kernel / IPv6
# =========================
- name: Enable IPv6 forwarding (global)
  sysctl:
    name: net.ipv6.conf.all.forwarding
    value: '1'
    state: present
    reload: yes
  become: yes

- name: Disable RA acceptance on LAN (we are router)
  sysctl:
    name: "net.ipv6.conf.{{ lan_interface }}.accept_ra"
    value: '0'
    state: present
    reload: yes
  become: yes

# =========================
# Red (persistente + runtime)
# =========================
- name: Render /etc/network/interfaces (ifupdown)
  template:
    src: interfaces.j2
    dest: /etc/network/interfaces
    mode: '0644'
    backup: yes
  notify: reload networking (ifupdown2)
  become: yes

- name: Ensure IPv6 assigned on {{ lan_interface }} (runtime)
  shell: |
    ip -6 addr show {{ lan_interface }} | grep -qw '{{ lan_ipv6_address }}' || ip -6 addr add {{ lan_ipv6_address }}/{{ lan_ipv6_prefix }} dev {{ lan_interface }}
    ip link set {{ lan_interface }} up
  changed_when: false
  become: yes

# =========================
# radvd + isc-dhcp-server6
# =========================
- name: Configure radvd (RA / SLAAC)
  template:
    src: radvd.conf.j2
    dest: /etc/radvd.conf
    mode: '0644'
  notify: restart radvd
  become: yes

- name: Configure DHCPv6 (ISC)
  template:
    src: dhcpd6.conf.j2
    dest: /etc/dhcp/dhcpd6.conf
    mode: '0644'
  notify: restart isc-dhcp-server6
  become: yes

- name: Bind DHCPv6 to LAN interface
  lineinfile:
    path: /etc/default/isc-dhcp-server
    regexp: '^INTERFACESv6='
    line: 'INTERFACESv6="{{ lan_interface }}"'
    create: yes
  notify: restart isc-dhcp-server6
  become: yes

# =========================
# Firewall nftables
# =========================
- name: Configure nftables (permit ICMPv6)
  template:
    src: nftables.conf.j2
    dest: /etc/nftables.conf
    mode: '0644'
  notify: restart nftables
  become: yes

- name: Ensure services enabled and started
  systemd:
    name: "{{ item }}"
    enabled: yes
    state: started
  loop:
    - radvd
    - isc-dhcp-server
    - nftables
  become: yes

# =========================
# Evidencias
# =========================
- name: Show IPv6 on {{ lan_interface }}
  command: ip -6 addr show {{ lan_interface }}
  register: ipv6_config
  changed_when: false

- name: Check radvd
  command: systemctl status radvd --no-pager
  register: radvd_status
  changed_when: false
  failed_when: false

- name: Check DHCPv6
  command: systemctl status isc-dhcp-server --no-pager
  register: dhcpv6_status
  changed_when: false
  failed_when: false

- name: Summary
  debug:
    msg:
      - "=================================================="
      - "✓ Debian IPv6 Router configurado (radvd + isc-dhcp-server6)"
      - "Red: 2025:DB8:101::/64"
      - "Gateway: {{ lan_ipv6_address }}/{{ lan_ipv6_prefix }} ({{ lan_interface }})"
      - "radvd: {{ 'OK' if radvd_status.rc == 0 else 'FALLÓ' }}"
      - "DHCPv6: {{ 'OK' if dhcpv6_status.rc == 0 else 'FALLÓ' }}"
      - "=================================================="
